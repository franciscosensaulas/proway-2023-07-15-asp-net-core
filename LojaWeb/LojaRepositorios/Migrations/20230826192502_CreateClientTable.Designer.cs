// <auto-generated />
using System;
using LojaRepositorios.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LojaRepositorios.Migrations
{
    [DbContext(typeof(LojaContexto))]
    [Migration("20230826192502_CreateClientTable")]
    partial class CreateClientTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LojaRepositorios.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("VARCHAR(14)")
                        .HasColumnName("Cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "123.456.789-00",
                            DataNascimento = new DateTime(1990, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Pedro da Silva"
                        });
                });

            modelBuilder.Entity("LojaRepositorios.Entidades.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("Nome");

                    b.Property<decimal>("PrecoUnitario")
                        .HasPrecision(14, 2)
                        .HasColumnType("DECIMAL(14,2)")
                        .HasColumnName("PrecoUnitario");

                    b.HasKey("Id");

                    b.ToTable("Produtos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "TV QLED Samsung 4k 50",
                            PrecoUnitario = 5949.72m
                        },
                        new
                        {
                            Id = 2,
                            Nome = "TV OLED LG 4k 50",
                            PrecoUnitario = 5300.10m
                        });
                });

            modelBuilder.Entity("LojaRepositorios.Entidades.Cliente", b =>
                {
                    b.OwnsOne("LojaRepositorios.Entidades.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("CHAR(10)")
                                .HasColumnName("Cep")
                                .IsFixedLength();

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .HasMaxLength(200)
                                .HasColumnType("VARCHAR(200)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("CHAR(2)")
                                .HasColumnName("Estado")
                                .IsFixedLength();

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("Logradouro");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR(30)")
                                .HasColumnName("Numero");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");

                            b1.HasData(
                                new
                                {
                                    ClienteId = 1,
                                    Bairro = "Badenfurt",
                                    Cep = "89070-250",
                                    Cidade = "Blumenau",
                                    Complemento = "Sem complemento",
                                    Estado = "SC",
                                    Logradouro = "Rua dos Pedra",
                                    Numero = "200"
                                });
                        });

                    b.Navigation("Endereco")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
